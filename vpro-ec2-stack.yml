---
- name: Setup Vprofile Stack
  hosts: localhost
  connection: local
  gather_facts: no
  tasks:
    - name: Import VPC setup Variables
      include_vars: vars/vpc-output-vars

    - name: Import Vprofile setup Variables
      include_vars: vars/vprostacksetup

    - name: create vprofile ec2 key
      ec2_key:
        name: vprokey
        region: "{{ region }}"
      register: vprokey_out

    - name: Save private key into file loginkey_vpro.pem
      copy:
        content: "{{ vprokey_out.key.private_key }}"
        dest: "./loginkey_vpro.pem"
        mode: 0600
      when: vprokey_out.changed

    - name : create SG for load balancer
      ec2_group:
        name: vproELB-sg
        description: Allow port 80 from everywhere and all port within sg
        region: "{{ region }}"
        vpc_id: "{{ vpcid }}"
        rules:
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: 0.0.0.0/0
      register: vproELBSG_out

    - name: create SG for vprofile Stack
      ec2_group:
        name: vprostack-sg
        description: Allow port 22 from everywhere and all port within sg
        region: "{{ region }}"
        vpc_id: "{{ vpcid }}"
        purge_rules: no
        rules:
         - proto: tcp
           from_port: 80
           to_port: 80
           group_id: "{{vproELBSG_out.group_id}}"

         - proto: tcp
           from_port: 22
           to_port: 22
           group_id: "{{BastionSGid}}"

      register: vprostackSG_out

    - name: update sg with its own sg id
      ec2_group:
        name: vprostack-sg
        description: Allow port 22 from everywhere and all port within sg
        region: "{{ region }}"
        vpc_id: "{{ vpcid }}"
        purge_rules: no
        rules:
          - proto: all
            group_id: "{{vprostackSG_out.group_id}}"
    - name: create nginx web01
      ec2:
        key_name: vprokey
        region: "{{ region }}"
        instance_type: t2.micro
        image: "{{ nginx_ami }}"
        wait: yes
        wait_timeout: 300
        instance_tags:
          name: "Web01"
          project: Vprofile
          Owner: Devops Team
        exact_count: 1
        count_tag:
          name: "Web01"
          project: Vprofile
          Owner: Devops Team
        group_id: "{{ vprostackSG_out.group_id }}"
        vpc_subnet_id: "{{privsub1id}}"
      register: Web01_out

    - name: create tomcat app01
      ec2:
        key_name: vprokey
        region: "{{ region }}"
        instance_type: t2.micro
        image: "{{ tomcat_ami }}"
        wait: yes
        wait_timeout: 300
        instance_tags:
          name: "app01"
          project: Vprofile
          Owner: Devops Team
        exact_count: 1
        count_tag:
          name: "app01"
          project: Vprofile
          Owner: Devops Team
        group_id: "{{ vprostackSG_out.group_id }}"
        vpc_subnet_id: "{{privsub1id}}"
      register: app01_out

    - name: create memcache mc01
      ec2:
        key_name: vprokey
        region: "{{ region }}"
        instance_type: t2.micro
        image: "{{ memcache_ami }}"
        wait: yes
        wait_timeout: 300
        instance_tags:
          name: "mc01"
          project: Vprofile
          Owner: Devops Team
        exact_count: 1
        count_tag:
          name: "mc01"
          project: Vprofile
          Owner: Devops Team
        group_id: "{{ vprostackSG_out.group_id }}"
        vpc_subnet_id: "{{privsub1id}}"
      register: mc01_out

    - name: create RabbitMQ rmq01
      ec2:
        key_name: vprokey
        region: "{{ region }}"
        instance_type: t2.micro
        image: "{{ rmq_ami }}"
        wait: yes
        wait_timeout: 300
        instance_tags:
          name: "rmq01"
          project: Vprofile
          Owner: Devops Team
        exact_count: 1
        count_tag:
          name: "rmq01"
          project: Vprofile
          Owner: Devops Team
          group_id: "{{ vprostackSG_out.group_id }}"
          vpc_subnet_id: "{{privsub1id}}"
      register: rmq01_out

    - name: create Mysql web01
      ec2:
        key_name: vprokey
        region: "{{ region }}"
        instance_type: t2.micro
        image: "{{ mysql_ami }}"
        wait: yes
        wait_timeout: 300
        instance_tags:
           name: "db01"
           project: Vprofile
           Owner: Devops Team
        exact_count: 1
        count_tag:
          name: "db01"
          project: Vprofile
          Owner: Devops Team
        group_id: "{{ vprostackSG_out.group_id }}"
        vpc_subnet_id: "{{privsub1id}}"
      register: db01_out

    - debug:
         var: db01_out.tagged_instances[0].id

    - local_action:
        module: ec2_elb_lb
        name: "vprofile-elb"
        region: "{{ region }}"
        state: present
        instance_ids:
          - "{{Web01_out.tagged_instances[0].id }}"
        purge_instances_ids: true
        security_group_ids: "{{ vproELBSG_out.group_id}}"
        subnets:
          - "{{ pubsub1id}}"
          - "{{ pubsub2id}}"
          - "{{ pubsub3id}}"
        listeners:
          - protocol: http
            load_balancer_port: 80
            instance_port: 80

    - name: insert/update Hosts IP& Name in file
      blockinfile:
         path: provision-stack/group_vars/hostsip
         block: |
           web01_ip: {{ Web01_out.tagged_instances[0].private_ip }}
           app01_ip: {{ app01_out.tagged_instances[0].private_ip }}
           rmq01_ip: {{ rmq01_out.tagged_instances[0].private_ip }}
           mc01_ip: {{ mc01_out.tagged_instances[0].private_ip }}
           db01_ip: {{ db01_out.tagged_instances[0].private_ip }}

    - name: copy login key to provision-stack directory
      copy:
        src: loginkey_vpro.pem
        dest: provision-stack/loginkey_vpro.pem
        mode: '0400'

    - name: insert/update inventory file provision-stack/inventory-vpro
      blockinfile:
        path: provision-stack/group_vars/inventory-vpro
        block: |
          web01 ansible_host: {{ Web01_out.tagged_instances[0].private_ip }}
          app01 ansible_host: {{ app01_out.tagged_instances[0].private_ip }}
          rmq01 ansible_host: {{ rmq01_out.tagged_instances[0].private_ip }}
          mc01 ansible_host: {{ mc01_out.tagged_instances[0].private_ip }}
          db01 ansible_host: {{ db01_out.tagged_instances[0].private_ip }}
          cntl ansible_host: 192.168.56.1/32 ansible_connection=local

          [websrvgrp]
          Web01

          [appsrvgrp]
          app01

          [rmqsrvgrp]
          rmq01

          [mcsrvgrp]
          mc01

          [dbsrvgrp]
          db01

          [control]
          cntl

          [ stack_inst:vars]
          ansible_user=ubuntu
          ansible_ssh_private_key_file=loginkey_vpro.pem
          #ansible_python_interpreter=/usr/bin/python3





